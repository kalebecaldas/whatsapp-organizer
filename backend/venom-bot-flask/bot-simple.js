// ===================================================================================
// BOT DE TESTE SIMPLIFICADO - SEM INTERA√á√ÉO COM BROWSER
// ===================================================================================

const axios = require('axios');

// --- CONFIGURA√á√ÉO ---
const config = {
  flaskWebhookUrl: 'http://localhost:5001/webhook',
  testMode: true
};

// --- LOGGER ---
const logger = {
  info: (message) => console.log(`[${new Date().toISOString()}] [INFO]  - ${message}`),
  warn: (message) => console.warn(`[${new Date().toISOString()}] [WARN]  - ${message}`),
  error: (message, error) => console.error(`[${new Date().toISOString()}] [ERROR] - ${message}`, error || ''),
  debug: (message) => console.debug(`[${new Date().toISOString()}] [DEBUG] - ${message}`)
};

/**
 * Fun√ß√£o de teste que simula mensagens do WhatsApp
 */
async function testWebhook() {
  try {
    logger.info("üß™ Iniciando testes do webhook...");
    
    const testMessages = [
      { from: '559285026981@c.us', body: 'Ol√°, gostaria de agendar uma consulta' },
      { from: '559285026981@c.us', body: 'Qual √© o hor√°rio dispon√≠vel?' },
      { from: '559285026981@c.us', body: 'Obrigado' }
    ];

    for (let i = 0; i < testMessages.length; i++) {
      const message = testMessages[i];
      logger.info(`üì§ Enviando mensagem de teste ${i + 1}: "${message.body}"`);
      
      try {
        const response = await axios.post(
          config.flaskWebhookUrl,
          message,
          { timeout: 30000 }
        );

        logger.info(`‚úÖ Resposta recebida: ${JSON.stringify(response.data)}`);
      } catch (error) {
        logger.error(`‚ùå Erro ao enviar mensagem ${i + 1}:`, error.message);
      }

      // Aguarda 2 segundos entre as mensagens
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    logger.info("‚úÖ Testes conclu√≠dos!");
    
  } catch (error) {
    logger.error("‚ùå Erro nos testes:", error);
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  try {
    logger.info("ü§ñ Iniciando Bot de Teste...");
    
    if (config.testMode) {
      await testWebhook();
    }
    
    // Mant√©m o processo rodando
    setInterval(() => {
      logger.info("üíì Bot de teste ativo...");
    }, 30000); // Log a cada 30 segundos

  } catch (err) {
    logger.error("‚ùå Erro fatal na inicializa√ß√£o:", err);
    process.exit(1);
  }
}

// Inicia a aplica√ß√£o
main(); 
import os
import json
import traceback
import time
import random
from openai import OpenAI
from openai.types.chat import ChatCompletionToolParam, ChatCompletionMessage, ChatCompletionMessageToolCall
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do .env
load_dotenv()

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise RuntimeError("‚ùå OPENAI_API_KEY n√£o definida no ambiente.")

# Configura√ß√µes de timeout e conectividade mais robustas
client = OpenAI(
    api_key=api_key,
    timeout=60.0,  # Timeout global de 60 segundos
    max_retries=2  # Retries autom√°ticos da biblioteca
)

# A lista de 'ferramentas' (fun√ß√µes) que a IA pode decidir chamar
tools: list[ChatCompletionToolParam] = [
    {
        "type": "function",
        "function": {
            "name": "iniciar_agendamento",
            "description": "Inicia o fluxo para agendar uma nova consulta quando o usu√°rio expressa essa inten√ß√£o.",
            "parameters": {
                "type": "object",
                "properties": {
                    "unidade": {"type": "string", "description": "A unidade espec√≠fica que o usu√°rio mencionou, como 'Vieiralves' ou 'S√£o Jos√©'."}
                }
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "get_insurance_data",
            "description": "Verifica se um conv√™nio espec√≠fico √© aceito ou lista todos os conv√™nios da cl√≠nica.",
            "parameters": {
                "type": "object",
                "properties": {
                    "nome_convenio": {"type": "string", "description": "O nome do conv√™nio sobre o qual o usu√°rio est√° perguntando."}
                }
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "get_clinic_data",
            "description": "Retorna dados das cl√≠nicas, como endere√ßo e telefone.",
            "parameters": {
                "type": "object",
                "properties": {
                    "unidade": {"type": "string", "description": "O nome da unidade espec√≠fica."}
                }
            }
        }
    }
]

def chat_with_functions(messages, max_retries=3, base_delay=1.0):
    """Chama o modelo GPT com suporte a `tools` e retorna o objeto de mensagem da resposta."""
    
    def make_request_with_retry(use_tools=True):
        """Faz a requisi√ß√£o com retry e backoff exponencial"""
        for attempt in range(max_retries + 1):
            try:
                if use_tools:
                    print(f"üß† Tentativa {attempt + 1}/{max_retries + 1}: Chamando API da OpenAI com ferramentas...")
                    print("--- PAYLOAD ENVIADO (com ferramentas) ---")
                    print(json.dumps({
                        'model': 'gpt-3.5-turbo',
                        'messages': messages,
                        'tools': tools,
                        'tool_choice': 'auto',
                        'timeout': 30.0
                    }, indent=2, ensure_ascii=False))
                    resp = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=messages,
                        tools=tools,
                        tool_choice="auto",
                        timeout=30.0  # Timeout de 30 segundos
                    )
                else:
                    print(f"üîÑ Tentativa {attempt + 1}/{max_retries + 1}: Chamando API da OpenAI sem ferramentas...")
                    print("--- PAYLOAD ENVIADO (sem ferramentas) ---")
                    print(json.dumps({
                        'model': 'gpt-3.5-turbo',
                        'messages': messages,
                        'timeout': 30.0
                    }, indent=2, ensure_ascii=False))
                    resp = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=messages,
                        timeout=30.0  # Timeout de 30 segundos
                    )
                
                print(f"‚úÖ Resposta da OpenAI recebida com sucesso (API REAL) - Tentativa {attempt + 1}")
                return resp.choices[0].message
                
            except Exception as e:
                print(f"‚ùå Erro na tentativa {attempt + 1}: {e}")
                traceback.print_exc()
                
                # Se for uma exce√ß√£o da OpenAI, tente mostrar o corpo da resposta
                response = getattr(e, 'response', None)
                if response is not None and hasattr(response, 'text'):
                    print(f"Resposta de erro da OpenAI: {response.text}")
                
                # Se n√£o for a √∫ltima tentativa, aguarda antes de tentar novamente
                if attempt < max_retries:
                    delay = base_delay * (2 ** attempt) + random.uniform(0, 1)  # Backoff exponencial + jitter
                    print(f"‚è≥ Aguardando {delay:.2f} segundos antes da pr√≥xima tentativa...")
                    time.sleep(delay)
                else:
                    print(f"‚ùå Todas as {max_retries + 1} tentativas falharam")
                    return None
    
    # Primeira tentativa com ferramentas
    result = make_request_with_retry(use_tools=True)
    if result:
        return result
    
    # Se falhou com ferramentas, tenta sem ferramentas
    print("üîÑ Tentando sem ferramentas como fallback...")
    result = make_request_with_retry(use_tools=False)
    if result:
        return result
    
    # Se tudo falhou, usa fallback inteligente
    print("üîÑ Usando modo de fallback inteligente...")
    return get_fallback_response(messages)

def get_fallback_response(messages):
    """Fornece respostas contextuais quando a API da OpenAI n√£o est√° dispon√≠vel"""
    if not messages:
        return ChatCompletionMessage(
            role='assistant',
            content="Ol√°! Como posso ajud√°-lo hoje?"
        )
    
    # Pega a √∫ltima mensagem do usu√°rio
    last_message = messages[-1].get('content', '').lower()
    
    # Respostas contextuais baseadas em palavras-chave
    if any(word in last_message for word in ['agendar', 'consulta', 'marcar', 'hor√°rio']):
        return ChatCompletionMessage(
            role='assistant',
            content="Perfeito! Vou ajud√°-lo a agendar uma consulta. Para come√ßar, preciso saber em qual unidade voc√™ gostaria de ser atendido. Temos as seguintes op√ß√µes:\n\n1Ô∏è‚É£ **Vieiralves** - Centro\n2Ô∏è‚É£ **S√£o Jos√©** - Zona Norte\n3Ô∏è‚É£ **Cohama** - Zona Sul\n\nQual unidade voc√™ prefere?"
        )
    
    elif any(word in last_message for word in ['unidade', 'vieiralves', 's√£o jos√©', 'cohaba']):
        return ChatCompletionMessage(
            role='assistant',
            content="√ìtimo! Agora preciso saber qual procedimento voc√™ gostaria de realizar. Temos v√°rias especialidades dispon√≠veis:\n\n1Ô∏è‚É£ **Consulta M√©dica**\n2Ô∏è‚É£ **Exame Laboratorial**\n3Ô∏è‚É£ **Fisioterapia**\n4Ô∏è‚É£ **Psicologia**\n5Ô∏è‚É£ **Nutri√ß√£o**\n\nQual procedimento voc√™ gostaria de agendar?"
        )
    
    elif any(word in last_message for word in ['procedimento', 'consulta m√©dica', 'exame', 'fisioterapia', 'psicologia', 'nutri√ß√£o']):
        return ChatCompletionMessage(
            role='assistant',
            content="Perfeito! Agora preciso saber qual data seria melhor para voc√™. Temos hor√°rios dispon√≠veis nos pr√≥ximos dias. Qual data voc√™ prefere?\n\nüìÖ **Pr√≥ximas datas dispon√≠veis:**\n- Amanh√£\n- Pr√≥xima semana\n- Outra data espec√≠fica\n\nQual seria sua prefer√™ncia?"
        )
    
    elif any(word in last_message for word in ['data', 'amanh√£', 'semana', 'dia']):
        return ChatCompletionMessage(
            role='assistant',
            content="Excelente! Agora preciso saber qual hor√°rio seria melhor para voc√™. Temos os seguintes turnos dispon√≠veis:\n\nüåÖ **Manh√£** (8h √†s 12h)\nüåû **Tarde** (14h √†s 18h)\nüåô **Noite** (18h √†s 20h)\n\nQual turno voc√™ prefere?"
        )
    
    elif any(word in last_message for word in ['manh√£', 'tarde', 'noite', 'turno']):
        return ChatCompletionMessage(
            role='assistant',
            content="Perfeito! Agora vou confirmar os dados do seu agendamento:\n\nüìã **Resumo do Agendamento:**\n- Unidade: [Unidade selecionada]\n- Procedimento: [Procedimento selecionado]\n- Data: [Data selecionada]\n- Hor√°rio: [Turno selecionado]\n\n‚úÖ **Confirma o agendamento?**\n\nResponda 'Sim' para confirmar ou 'N√£o' para fazer alguma altera√ß√£o."
        )
    
    elif any(word in last_message for word in ['sim', 'confirmar', 'ok']):
        return ChatCompletionMessage(
            role='assistant',
            content="üéâ **Agendamento confirmado com sucesso!**\n\nüìÖ Seu agendamento foi realizado e voc√™ receber√° uma confirma√ß√£o por WhatsApp em breve.\n\nüìû Se precisar de mais alguma coisa, √© s√≥ me avisar!\n\nObrigado por escolher nossa cl√≠nica! üòä"
        )
    
    elif any(word in last_message for word in ['n√£o', 'alterar', 'mudar']):
        return ChatCompletionMessage(
            role='assistant',
            content="Sem problemas! Vamos recome√ßar o processo de agendamento. Diga 'agendar' para iniciar novamente."
        )
    
    elif any(word in last_message for word in ['oi', 'ol√°', 'bom dia', 'boa tarde', 'boa noite']):
        return ChatCompletionMessage(
            role='assistant',
            content="Ol√°! üëã Bem-vindo √† Cl√≠nica √Ågil!\n\nComo posso ajud√°-lo hoje? Posso auxiliar com:\n\nüìÖ **Agendamento de consultas**\nüè• **Informa√ß√µes sobre unidades**\nüíä **D√∫vidas sobre procedimentos**\n\nO que voc√™ gostaria de fazer?"
        )
    
    elif any(word in last_message for word in ['ajuda', 'help', 'como']):
        return ChatCompletionMessage(
            role='assistant',
            content="Claro! Estou aqui para ajud√°-lo. Posso auxiliar com:\n\nüìÖ **Agendar consultas** - Diga 'gostaria de agendar'\nüè• **Informa√ß√µes das unidades** - Pergunte sobre Vieiralves, S√£o Jos√© ou Cohama\nüíä **Procedimentos dispon√≠veis** - Consulte sobre consultas, exames, fisioterapia, etc.\n\nComo posso ajud√°-lo?"
        )
    
    else:
        return ChatCompletionMessage(
            role='assistant',
            content="Entendo! Se voc√™ gostaria de agendar uma consulta, diga 'gostaria de agendar' e eu te ajudo com todo o processo. Se tiver outras d√∫vidas, √© s√≥ perguntar! üòä"
        )

